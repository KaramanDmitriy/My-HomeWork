const carObject = {
  brand: 'Skoda',
  model: 'Kamiq',
  year: 2023,
  averageSpeed: 100,
  fuel: 50,
  averageFuel: 10,
  drivers: ['Dima', 'Olena'],

  showInfo() {
    return `
      <strong>–ú–∞—Ä–∫–∞:</strong> ${this.brand}<br>
      <strong>–ú–æ–¥–µ–ª—å:</strong> ${this.model}<br>
      <strong>–†—ñ–∫:</strong> ${this.year}<br>
      <strong>–°–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å:</strong> ${this.averageSpeed} –∫–º/–≥–æ–¥<br>
      <strong>–û–±—Å—è–≥ –±–∞–∫—É:</strong> ${this.fuel} –ª<br>
      <strong>–í–∏—Ç—Ä–∞—Ç–∞ –ø–∞–ª–∏–≤–∞:</strong> ${this.averageFuel} –ª/100 –∫–º<br>
      <strong>–í–æ–¥—ñ—ó:</strong> ${this.drivers.join(', ')}
    `;
  },

  addDriver(name) {
    if (!this.drivers.includes(name)) {
      this.drivers.push(name);
      return `${name} –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –≤–æ–¥—ñ—ó–≤.`;
    } else {
      return `${name} –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É –≤–æ–¥—ñ—ó–≤.`;
    }
  },

  hasDriver(name) {
    return this.drivers.includes(name)
      ? `${name} —î —É —Å–ø–∏—Å–∫—É –≤–æ–¥—ñ—ó–≤.`
      : `${name} –Ω–µ–º–∞—î —É —Å–ø–∏—Å–∫—É –≤–æ–¥—ñ—ó–≤.`;
  },

  calculateTrip(distance) {
    const drivingTime = distance / this.averageSpeed;
    const restTime = Math.floor(drivingTime / 4);
    const totalTime = drivingTime + restTime;

    const hours = Math.floor(totalTime);
    const minutes = Math.round((totalTime - hours) * 60);

    const fuelNeeded = (distance / 100) * this.averageFuel;

    return `
      –ß–∞—Å —É –¥–æ—Ä–æ–∑—ñ (–∑ –ø–µ—Ä–µ—Ä–≤–∞–º–∏): ${hours} –≥–æ–¥ ${minutes} —Ö–≤<br>
      –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–∞–ª–∏–≤–∞: ${fuelNeeded.toFixed(1)} –ª
    `;
  }
};

function less1_1() {
  document.getElementById('lesson1-result').innerHTML = carObject.showInfo();
}

function less1_2() {
  if (confirm("–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –≤–æ–¥—ñ—è?")) {
    const name = prompt("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –≤–æ–¥—ñ—è:");
    if (name) {
      document.getElementById('lesson1-result').innerHTML = carObject.addDriver(name);
    }
  }
}

function less1_3() {
  const name = prompt("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –≤–æ–¥—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:");
  if (name) {
    document.getElementById('lesson1-result').innerHTML = carObject.hasDriver(name);
  }
}

function less1_4() {
  const distance = prompt("–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥—Å—Ç–∞–Ω—å —É –∫–º:");
  if (distance && !isNaN(distance)) {
    document.getElementById('lesson1-result').innerHTML = carObject.calculateTrip(parseFloat(distance));
  }
}


const timeObject = {
  hours: new Date().getHours(),
  minutes: new Date().getMinutes(),
  seconds: new Date().getSeconds(),

  toSeconds() {
    return this.hours * 3600 + this.minutes * 60 + this.seconds;
  },

  fromSeconds(totalSeconds) {
    totalSeconds = ((totalSeconds % 86400) + 86400) % 86400; 
    this.hours = Math.floor(totalSeconds / 3600);
    this.minutes = Math.floor((totalSeconds % 3600) / 60);
    this.seconds = totalSeconds % 60;
  },

  showTime() {
    return `–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: ${this.hours} –≥–æ–¥ ${this.minutes} —Ö–≤ ${this.seconds} —Å–µ–∫`;
  },

  addSeconds(sec) {
    const total = this.toSeconds() + sec;
    this.fromSeconds(total);
  },

  addMinutes(min) {
    this.addSeconds(min * 60);
  },

  addHours(hr) {
    this.addSeconds(hr * 3600);
  }
};

function updateOutput(content) {
  const output = document.getElementById("lesson2_result");
  if (output) {
    output.innerHTML = content;
  } else {
    console.error("–ï–ª–µ–º–µ–Ω—Ç –∑ id='lesson2_result' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
  }
}

function less2_1() {
  updateOutput(timeObject.showTime());
}

function less2_2() {
  if (confirm("–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —á–∞—Å –Ω–∞ –ø–µ–≤–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ–∫—É–Ω–¥?")) {
    const sec = prompt("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ–∫—É–Ω–¥:");
    if (sec && !isNaN(sec)) {
      timeObject.addSeconds(parseInt(sec));
      updateOutput(timeObject.showTime());
    }
  }
}

function less2_3() {
  if (confirm("–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —á–∞—Å –Ω–∞ –ø–µ–≤–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω?")) {
    const min = prompt("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω:");
    if (min && !isNaN(min)) {
      timeObject.addMinutes(parseInt(min));
      updateOutput(timeObject.showTime());
    }
  }
}

function less2_4() {
  if (confirm("–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —á–∞—Å –Ω–∞ –ø–µ–≤–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω?")) {
    const hr = prompt("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω:");
    if (hr && !isNaN(hr)) {
      timeObject.addHours(parseInt(hr));
      updateOutput(timeObject.showTime());
    }
  }
}



const fraction = {
  getValuesFromInputs() {
    const n1 = document.querySelector('.drib1-1').value;
    const d1 = document.querySelector('.drib1-2').value;
    const n2 = document.querySelector('.drib2-1').value;
    const d2 = document.querySelector('.drib2-2').value;

    if (!n1 || !d1 || !n2 || !d2 || d1 == 0 || d2 == 0) {
      alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥—Ä–æ–±—ñ–≤ (–∑–Ω–∞–º–µ–Ω–Ω–∏–∫ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ 0)");
      return false;
    }

    this.numerator1 = parseInt(n1);
    this.denominator1 = parseInt(d1);
    this.numerator2 = parseInt(n2);
    this.denominator2 = parseInt(d2);
    return true;
  },

  gcd(a, b) {
    return b === 0 ? a : this.gcd(b, a % b);
  },

  simplify(numerator, denominator) {
    const divisor = this.gcd(numerator, denominator);
    return {
      numerator: numerator / divisor,
      denominator: denominator / divisor
    };
  },

  add() {
    const num = this.numerator1 * this.denominator2 + this.numerator2 * this.denominator1;
    const den = this.denominator1 * this.denominator2;
    return this.simplify(num, den);
  },

  subtract() {
    const num = this.numerator1 * this.denominator2 - this.numerator2 * this.denominator1;
    const den = this.denominator1 * this.denominator2;
    return this.simplify(num, den);
  },

  multiply() {
    const num = this.numerator1 * this.numerator2;
    const den = this.denominator1 * this.denominator2;
    return this.simplify(num, den);
  },

  divide() {
    const num = this.numerator1 * this.denominator2;
    const den = this.denominator1 * this.numerator2;
    return this.simplify(num, den);
  }
};

// üîß –í—ñ–∑—É–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥—Ä–æ–±—É
function formatFractionVisual(numerator, denominator) {
  const width = `${Math.max(numerator.toString().length, denominator.toString().length)}ch`;
  return `
    <div style="display: inline-block; text-align: center; font-size: 1.2em;">
      <div>${numerator}</div>
      <div style="border-top: 2px solid #000; width: ${width}; margin: 2px auto;"></div>
      <div>${denominator}</div>
    </div>
  `;
}

// üîß –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
function updateLesson3Output(htmlContent) {
  const output = document.getElementById("lesson3_result");
  if (output) {
    output.innerHTML = htmlContent;
  }
}

// ‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è
function less3_add() {
  if (fraction.getValuesFromInputs()) {
    const result = fraction.add();
    const visual = formatFractionVisual(result.numerator, result.denominator);
    updateLesson3Output(`‚ûï –°—É–º–∞:<br>${visual}`);
  }
}

// ‚ûñ –í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è
function less3_subtract() {
  if (fraction.getValuesFromInputs()) {
    const result = fraction.subtract();
    const visual = formatFractionVisual(result.numerator, result.denominator);
    updateLesson3Output(`‚ûñ –†—ñ–∑–Ω–∏—Ü—è:<br>${visual}`);
  }
}

// ‚úñÔ∏è –ú–Ω–æ–∂–µ–Ω–Ω—è
function less3_multiply() {
  if (fraction.getValuesFromInputs()) {
    const result = fraction.multiply();
    const visual = formatFractionVisual(result.numerator, result.denominator);
    updateLesson3Output(`‚úñÔ∏è –î–æ–±—É—Ç–æ–∫:<br>${visual}`);
  }
}

// ‚ûó –î—ñ–ª–µ–Ω–Ω—è
function less3_divide() {
  if (fraction.getValuesFromInputs()) {
    const result = fraction.divide();
    const visual = formatFractionVisual(result.numerator, result.denominator);
    updateLesson3Output(`‚ûó –ß–∞—Å—Ç–∫–∞:<br>${visual}`);
  }
}
